name: Backend CI/CD - GCP Kubernetes

on:
  push:
    branches: [master, dev, 'release/**']
  pull_request:
    branches: [master, dev]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Vkhn2W3LudKzzis
          POSTGRES_DB: app_presente
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install PostgreSQL Client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest redis

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Initialize Database and Insert Test User
        env:
          PGPASSWORD: Vkhn2W3LudKzzis
        run: |
          psql -h localhost -p 5432 -U postgres -d app_presente -c "CREATE TABLE IF NOT EXISTS usuario (id_usuario SERIAL PRIMARY KEY, login VARCHAR(255), senha VARCHAR(255), nome VARCHAR(255), cargo VARCHAR(255), id_secretaria INTEGER);"
          psql -h localhost -p 5432 -U postgres -d app_presente -c "INSERT INTO usuario (id_usuario, login, senha, nome, cargo, id_secretaria) VALUES (9999, 'addda', 'teste123', 'Test User', 'Secretaria', 70) ON CONFLICT (id_usuario) DO NOTHING;"

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        env: [production, stage]
    env:
      PROJECT_ID: ${{ matrix.env == 'production' && 'app-chamada-5706' || 'stage-app-presente' }}
      CLUSTER_NAME: ${{ matrix.env == 'production' && 'app-prod-fa395f7c' || 'stage-app-presente' }}
      GKE_ZONE: ${{ matrix.env == 'production' && 'us-central1-a' || 'us-west1-a' }}
      NAMESPACE: ${{ matrix.env == 'production' && 'app-chamada-production' || 'stage-app-presente' }}
      GAR_LOCATION: us-central1
      DOCKER_IMAGE: ${{ matrix.env == 'production' && 'us-central1-docker.pkg.dev/app-chamada-5706/containers/presente-backend' || 'us-central1-docker.pkg.dev/app-chamada-stage/containers/presente-backend' }}
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ matrix.env == 'production' && secrets.GOOGLE_CLOUD_KEYS || secrets.GCP_CREDENTIALS_JSON_STAGE }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Build and push Docker image
        run: |
          COMMIT_SHA=${{ github.sha }}
          docker build -t guilherme310402/app_presente_back:$COMMIT_SHA .
          echo "${{ secrets.DOCKERHUB_TOKEN }}" |
              docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push guilherme310402/app_presente_back:$COMMIT_SHA

  deploy:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        env: [production, stage]
    env:
      PROJECT_ID: ${{ matrix.env == 'production' && 'app-chamada-5706' || 'stage-app-presente' }}
      CLUSTER_NAME: ${{ matrix.env == 'production' && 'app-prod-fa395f7c' || 'stage-app-presente' }}
      GKE_ZONE: ${{ matrix.env == 'production' && 'us-central1-a' || 'us-west1-a' }}
      NAMESPACE: ${{ matrix.env == 'production' && 'app-chamada-production' || 'stage-app-presente' }}
      GAR_LOCATION: us-central1
      DOCKER_IMAGE: ${{ matrix.env == 'production' && 'us-central1-docker.pkg.dev/app-chamada-5706/containers/presente-backend' || 'us-central1-docker.pkg.dev/app-chamada-stage/containers/presente-backend' }}
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ matrix.env == 'production' && secrets.GOOGLE_CLOUD_KEYS || secrets.GCP_CREDENTIALS_JSON_STAGE }}

      - name: Set up Cloud SDK and kubectl
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'kubectl'

      - name: Install GKE Auth Plugin
        run: |
          sudo curl -Lo /usr/local/bin/gke-gcloud-auth-plugin \
            https://storage.googleapis.com/gke-release/gke-gcloud-auth-plugin/linux/amd64/gke-gcloud-auth-plugin
          sudo chmod +x /usr/local/bin/gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ env.PROJECT_ID }}

      - name: Generate and apply Kubernetes manifests (Service + Deployment)
        run: |
          export NAMESPACE=${{ env.NAMESPACE }}
          envsubst < backend-service.yaml > backend-service.yaml
          envsubst < backend-deployment.yaml > backend-deployment.yaml
          kubectl apply -f backend-service.yaml
          kubectl apply -f backend-deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          COMMIT_SHA=${{ github.sha }}
          kubectl set image deployment/app-presente-back -n ${{ env.NAMESPACE }} \
            app-presente-back=${{ env.DOCKER_IMAGE }}:$COMMIT_SHA
          kubectl rollout status deployment/app-presente-back \
            -n ${{ env.NAMESPACE }} --timeout=120s

  release-notification:
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: saler.scl@gmail.com
          password: ${{ secrets.EMAIL_PASS }}
          subject: "üöÄ Nova vers√£o em pr√©-produ√ß√£o dispon√≠vel"
          to: saler.cez@gmail.com
          from: "Presente CI/CD <saler.scl@gmail.com>"
          html_body: |
            <h2>Nova vers√£o em pr√©-produ√ß√£o</h2>
            <p>Uma nova imagem foi constru√≠da e enviada para o Artifact Registry com base no branch <strong>${{ github.ref_name }}</strong>.</p>
            <p><strong>Imagem:</strong> $DOCKER_IMAGE:latest</p>
            <hr/>
            <p>Workflow: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Ver execu√ß√£o</a></p>
