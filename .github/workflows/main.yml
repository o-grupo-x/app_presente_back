name: Backend CI/CD - GCP Kubernetes

on:
  push:
    branches: [master, dev, 'release/**']
  pull_request:
    branches: [master, dev]
  workflow_dispatch:

env:
  PROJECT_ID: app-chamada-5706
  GAR_LOCATION: us-central1
  CLUSTER_NAME: app-prod-1720e7a1 # Automatiza sa porra logo !
  GKE_ZONE: us-central1-a
  NAMESPACE: app-chamada-production
  DEPLOYMENT_NAME: presente-backend
  DOCKER_IMAGE: us-central1-docker.pkg.dev/app-chamada-5706/containers/presente-backend

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Vkhn2W3LudKzzis
          POSTGRES_DB: app_presente
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install PostgreSQL Client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Install Dependencies
        working-directory: ./backend/src
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest redis

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Initialize Database and Insert Test User
        env:
          PGPASSWORD: Vkhn2W3LudKzzis
        run: |
          psql -h localhost -p 5432 -U postgres -d app_presente -c "CREATE TABLE IF NOT EXISTS usuario (id_usuario SERIAL PRIMARY KEY, login VARCHAR(255), senha VARCHAR(255), nome VARCHAR(255), cargo VARCHAR(255), id_secretaria INTEGER);"
          psql -h localhost -p 5432 -U postgres -d app_presente -c "INSERT INTO usuario (id_usuario, login, senha, nome, cargo, id_secretaria) VALUES (9999, 'addda', 'teste123', 'Test User', 'Secretaria', 70) ON CONFLICT (id_usuario) DO NOTHING;"

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build and push Docker image
        run: |
          COMMIT_SHA=${{ github.sha }}
          docker build -t $DOCKER_IMAGE:$COMMIT_SHA ./backend/src

          echo "${{ secrets.GCP_SA_KEY }}" | docker login -u _json_key --password-stdin https://$GAR_LOCATION-docker.pkg.dev

          docker push $DOCKER_IMAGE:$COMMIT_SHA

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

      - name: Set up Cloud SDK and kubectl
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'kubectl'

      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo curl -Lo /usr/local/bin/gke-gcloud-auth-plugin \
            https://storage.googleapis.com/gke-release/gke-gcloud-auth-plugin/linux/amd64/gke-gcloud-auth-plugin
          sudo chmod +x /usr/local/bin/gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Get cluster credentials
        run: |
          gcloud container clusters get-credentials $CLUSTER_NAME \
            --zone $GKE_ZONE \
            --project $PROJECT_ID

      - name: Deploy to Kubernetes
        run: |
          COMMIT_SHA=${{ github.sha }}

          kubectl apply -f backend/src/backend-service.yaml
          kubectl apply -f backend/src/backend-deployment.yaml

          kubectl set image deployment/$DEPLOYMENT_NAME -n $NAMESPACE \
            $DEPLOYMENT_NAME=$DOCKER_IMAGE:$COMMIT_SHA

          kubectl rollout status deployment/$DEPLOYMENT_NAME \
            -n $NAMESPACE --timeout=120s
