name: Backend CI/CD - GCP Kubernetes

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DEPLOYMENT_NAME: presente-backend
  DOCKER_IMAGE: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/presente-registry/presente-backend

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Vkhn2W3LudKzzis
          POSTGRES_DB: app_presente
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install PostgreSQL Client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Install Dependencies
        working-directory: ./backend/src
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest redis

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Initialize Database and Insert Test User
        env:
          PGPASSWORD: Vkhn2W3LudKzzis
        run: |
          psql -h localhost -p 5432 -U postgres -d app_presente -c "CREATE TABLE IF NOT EXISTS usuario (id_usuario SERIAL PRIMARY KEY, login VARCHAR(255), senha VARCHAR(255), nome VARCHAR(255), cargo VARCHAR(255), id_secretaria INTEGER);"
          psql -h localhost -p 5432 -U postgres -d app_presente -c "INSERT INTO usuario (id_usuario, login, senha, nome, cargo, id_secretaria) VALUES (9999, 'addda', 'teste123', 'Test User', 'Secretaria', 70) ON CONFLICT (id_usuario) DO NOTHING;"

      - name: Test Redis Connectivity
        working-directory: ./backend/src
        env:
          REDIS_HOST: 35.232.92.107
          REDIS_PORT: 6379
          DEBUG: True
        run: |
          python -c "import redis; r = redis.Redis(host='$REDIS_HOST', port=$REDIS_PORT, decode_responses=True); print(r.ping())"

      - name: Run Backend Tests
        working-directory: ./backend/src
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Vkhn2W3LudKzzis
          DATABASE_IP: localhost
          SECRET_KEY: qualquercoisa
          REDIS_HOST: 35.232.92.107
          REDIS_PORT: 6379
          DEBUG: True
        run: pytest tests/ -v

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: ./backend/src
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build and push Docker image
        run: |
          docker build -t guilherme310402/app_presente_back:latest ./backend/src
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push guilherme310402/app_presente_back:latest
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # deploy-stage:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: "${{ secrets.GOOGLE_CLOUD_KEYS }}"

  #     - name: Set up Google Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Install gke-gcloud-auth-plugin
  #       run: |
  #         gcloud components install gke-gcloud-auth-plugin --quiet
  #         gcloud components update --quiet

  #     - name: Get GKE credentials
  #       run: |
  #         gcloud container clusters get-credentials devops-cluster \
  #           --region us-central1 \
  #           --project app-chamada-5706

  #     - name: Ensure namespace exists
  #       run: |
  #         kubectl get ns stage-app-presente || \
  #           kubectl create ns stage-app-presente

  #     - name: Deploy manifests
  #       run: |
  #         # Aplica primeiro o Service, depois o Deployment
  #         kubectl -n stage-app-presente apply -f backend/src/backend-service.yaml
  #         kubectl -n stage-app-presente apply -f backend/src/backend-deployment.yaml

  #     - name: Wait for Deployment rollout
  #       run: |
  #         kubectl -n stage-app-presente rollout status \
  #           deployment/app-presente-back \
  #           --timeout=300s
            
  #     - name: Force restart of backend
  #       run: kubectl rollout restart deployment app-presente-back -n stage-app-presente

  deploy:
    #needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    #environment: ${{ github.ref }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Get commit SHA
        id: commit
        run: echo "SHORT_SHA=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT
  
      - id: 'auth'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_KEYS }}
          project_id: app-chamada-5706
  
      - name: Set up Cloud SDK and kubectl
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: app-chamada-5706
          install_components: 'kubectl'
  
      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo curl -Lo /usr/local/bin/gke-gcloud-auth-plugin \
            https://storage.googleapis.com/gke-release/gke-gcloud-auth-plugin/linux/amd64/gke-gcloud-auth-plugin
          sudo chmod +x /usr/local/bin/gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
  
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials devops-cluster \
            --region us-central1 \
            --project app-chamada-5706
  
      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/app-presente-back -n stage-app-presente \
            app-presente-back=guilherme310402/app_presente_back:latest
          
          kubectl patch deployment app-presente-back -n stage-app-presente \
            -p '{"spec":{"template":{"spec":{"nodeSelector":{"kubernetes.io/arch":"amd64"}}}}}'

          kubectl rollout restart deployment/app-presente-back -n stage-app-presente
          kubectl rollout status deployment/app-presente-back -n stage-app-presente --timeout=120s
