name: Backend CI/CD - GCP Kubernetes

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DEPLOYMENT_NAME: presente-backend
  DOCKER_IMAGE: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/presente-registry/presente-backend


jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Vkhn2W3LudKzzis
          POSTGRES_DB: app_presente
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PostgreSQL Client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Install Dependencies
        working-directory: ./backend/src
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest redis

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Initialize Database and Insert Test User
        env:
          PGPASSWORD: Vkhn2W3LudKzzis
        run: |
          psql -h localhost -p 5432 -U postgres -d app_presente -c "CREATE TABLE IF NOT EXISTS usuario (id_usuario SERIAL PRIMARY KEY, login VARCHAR(255), senha VARCHAR(255), nome VARCHAR(255), cargo VARCHAR(255), id_secretaria INTEGER);"
          psql -h localhost -p 5432 -U postgres -d app_presente -c "INSERT INTO usuario (id_usuario, login, senha, nome, cargo, id_secretaria) VALUES (9999, 'addda', 'teste123', 'Test User', 'Secretaria', 70) ON CONFLICT (id_usuario) DO NOTHING;"

      - name: Test Redis Connectivity
        working-directory: ./backend/src
        env:
          REDIS_HOST: 35.202.222.14
          REDIS_PORT: 6379
          REDIS_PASSWORD: redis
        run: |
          python -c "import redis; r = redis.Redis(host='35.202.222.14', port=6379, password='redis', decode_responses=True); print(r.ping())"

      - name: Run Backend Tests
        working-directory: ./backend/src
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Vkhn2W3LudKzzis
          DATABASE_IP: localhost
          SECRET_KEY: qualquercoisa
          REDIS_HOST: 35.202.222.14
          REDIS_PORT: 6379
          REDIS_PASSWORD: redis
          DEBUG: True
        run: pytest tests/ -v

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/dev') || startsWith(github.ref, 'refs/heads/release/')
    steps:
      - uses: actions/checkout@v3
      - name: Auth GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev
      - name: Build and Push Docker Image
        working-directory: ./backend/src
        run: |
          TAG=$(echo ${GITHUB_REF##*/})
          docker build -t $DOCKER_IMAGE:$TAG .
          docker push $DOCKER_IMAGE:$TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - uses: actions/checkout@v3
      - name: Auth GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"
      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.GKE_ZONE }}
      - name: Deploy to GKE
        run: |
          NAMESPACE=$(if [[ "${GITHUB_REF##*/}" == "main" ]]; then echo production; else echo stage; fi)
          TAG=${GITHUB_REF##*/}
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} ${{ env.DEPLOYMENT_NAME }}=$DOCKER_IMAGE:$TAG -n $NAMESPACE
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n $NAMESPACE
