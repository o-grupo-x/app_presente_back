name: Backend CI/CD

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Vkhn2W3LudKzzis
          POSTGRES_DB: app_presente
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PostgreSQL Client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Install Dependencies
        working-directory: ./backend/src
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest redis

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Initialize Database and Insert Test User
        env:
          PGPASSWORD: Vkhn2W3LudKzzis
        run: |
          psql -h localhost -p 5432 -U postgres -d app_presente -c "CREATE TABLE IF NOT EXISTS usuario (id_usuario SERIAL PRIMARY KEY, login VARCHAR(255), senha VARCHAR(255), nome VARCHAR(255), cargo VARCHAR(255), id_secretaria INTEGER);"
          psql -h localhost -p 5432 -U postgres -d app_presente -c "INSERT INTO usuario (id_usuario, login, senha, nome, cargo, id_secretaria) VALUES (9999, 'addda', 'teste123', 'Test User', 'Secretaria', 70) ON CONFLICT (id_usuario) DO NOTHING;"

      - name: Test Redis Connectivity
        working-directory: ./backend/src
        env:
          REDIS_HOST: 35.202.222.14
          REDIS_PORT: 6379
          REDIS_PASSWORD: redis
        run: |
          python -c "import redis; r = redis.Redis(host='35.202.222.14', port=6379, password='redis', decode_responses=True); print(r.ping())"

      - name: Run Backend Tests
        working-directory: ./backend/src
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Vkhn2W3LudKzzis
          DATABASE_IP: localhost
          SECRET_KEY: qualquercoisa
          REDIS_HOST: 35.202.222.14
          REDIS_PORT: 6379
          REDIS_PASSWORD: redis
          DEBUG: True
        run: pytest tests/ -v

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Backend Docker Images
        working-directory: ./backend/src
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker build -t $DOCKERHUB_USERNAME/presente-backend:staging .
          docker build -t $DOCKERHUB_USERNAME/presente-backend:production .
          docker push $DOCKERHUB_USERNAME/presente-backend:staging
          docker push $DOCKERHUB_USERNAME/presente-backend:production

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install ZeroTier and Authorize Node
        env:
          ZEROTIER_NETWORK_ID: ${{ secrets.ZEROTIER_NETWORK_ID }}
          ZEROTIER_API_TOKEN: ${{ secrets.ZEROTIER_API_TOKEN }}
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -s https://install.zerotier.com | sudo bash
          sudo zerotier-cli join $ZEROTIER_NETWORK_ID
          sleep 10
          # Get the node ID of the runner
          NODE_ID=$(sudo zerotier-cli info | awk '{print $3}')
          echo "Node ID: $NODE_ID"
          # Authorize the node and set its name to github-<run_id>
          curl -X POST "https://api.zerotier.com/api/v1/network/$ZEROTIER_NETWORK_ID/member/$NODE_ID" \
            -H "Authorization: Bearer $ZEROTIER_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"name\": \"github-${{ github.run_id }}\", \"config\": {\"authorized\": true}}"
          # Verify the node joined the network
          sudo zerotier-cli listnetworks

      - name: Deploy to Staging EC2
        env:
          EC2_HOST: ${{ secrets.STAGING_EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.STAGING_EC2_SSH_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_IP: ${{ secrets.DATABASE_IP }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REDIS_HOST: 35.202.222.14
          REDIS_PORT: 6379
          REDIS_PASSWORD: redis
          DEBUG: True
        run: |
          echo "$EC2_SSH_KEY" > ssh_key.pem
          chmod 400 ssh_key.pem
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_HOST << EOF
            # Pull the new image
            docker pull $DOCKERHUB_USERNAME/presente-backend:staging

            # Start the new container on a temporary port to test it
            docker run -d --name app_presente_backend_staging_new -p 8002:8000 \
              -e POSTGRES_USER=$POSTGRES_USER \
              -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
              -e DATABASE_IP=$DATABASE_IP \
              -e SECRET_KEY=$SECRET_KEY \
              -e REDIS_HOST=$REDIS_HOST \
              -e REDIS_PORT=$REDIS_PORT \
              -e REDIS_PASSWORD=$REDIS_PASSWORD \
              -e DEBUG=$DEBUG \
              $DOCKERHUB_USERNAME/presente-backend:staging

            # Wait for the container to start (account for HEALTHCHECK start-period)
            sleep 10

            # Wait and check if the new container is healthy
            echo "Waiting for the new container to become healthy..."
            for i in {1..20}
            do
              if docker inspect app_presente_backend_staging_new --format='{{.State.Health.Status}}' | grep -q "healthy"; then
                echo "New container is healthy!"
                break
              fi
              if [ \$i -eq 20 ]; then
                echo "New container failed to become healthy!"
                echo "Container logs:"
                docker logs app_presente_backend_staging_new
                docker stop app_presente_backend_staging_new
                docker rm app_presente_backend_staging_new
                exit 1
              fi
              sleep 3
            done

            # Stop and remove the old container
            docker stop app_presente_backend_staging || true
            docker rm app_presente_backend_staging || true

            # Rename the new container and ensure it's stopped/removed before starting the final one
            docker rename app_presente_backend_staging_new app_presente_backend_staging
            docker stop app_presente_backend_staging || true
            docker rm app_presente_backend_staging || true

            # Start the final container on the correct port
            docker run -d --name app_presente_backend_staging -p 8001:8000 \
              -e POSTGRES_USER=$POSTGRES_USER \
              -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
              -e DATABASE_IP=$DATABASE_IP \
              -e SECRET_KEY=$SECRET_KEY \
              -e REDIS_HOST=$REDIS_HOST \
              -e REDIS_PORT=$REDIS_PORT \
              -e REDIS_PASSWORD=$REDIS_PASSWORD \
              -e DEBUG=$DEBUG \
              $DOCKERHUB_USERNAME/presente-backend:staging

            # Verify the final container is running
            docker ps
          EOF

      - name: Clean Up ZeroTier Node
        env:
          ZEROTIER_NETWORK_ID: ${{ secrets.ZEROTIER_NETWORK_ID }}
          ZEROTIER_API_TOKEN: ${{ secrets.ZEROTIER_API_TOKEN }}
        run: |
          NODE_ID=$(sudo zerotier-cli info | awk '{print $3}')
          curl -X POST "https://api.zerotier.com/api/v1/network/$ZEROTIER_NETWORK_ID/member/$NODE_ID" \
            -H "Authorization: Bearer $ZEROTIER_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"config": {"authorized": false}}'
          sudo zerotier-cli leave $ZEROTIER_NETWORK_ID

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install ZeroTier and Authorize Node
        env:
          ZEROTIER_NETWORK_ID: ${{ secrets.ZEROTIER_NETWORK_ID }}
          ZEROTIER_API_TOKEN: ${{ secrets.ZEROTIER_API_TOKEN }}
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -s https://install.zerotier.com | sudo bash
          sudo zerotier-cli join $ZEROTIER_NETWORK_ID
          sleep 10
          # Get the node ID of the runner
          NODE_ID=$(sudo zerotier-cli info | awk '{print $3}')
          echo "Node ID: $NODE_ID"
          # Authorize the node and set its name to github-<run_id>
          curl -X POST "https://api.zerotier.com/api/v1/network/$ZEROTIER_NETWORK_ID/member/$NODE_ID" \
            -H "Authorization: Bearer $ZEROTIER_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"name\": \"github-${{ github.run_id }}\", \"config\": {\"authorized\": true}}"
          # Verify the node joined the network
          sudo zerotier-cli listnetworks

      - name: Deploy to Production EC2
        env:
          EC2_HOST: ${{ secrets.PRODUCTION_EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_IP: ${{ secrets.DATABASE_IP }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REDIS_HOST: 35.202.222.14
          REDIS_PORT: 6379
          REDIS_PASSWORD: redis
          DEBUG: False
        run: |
          echo "$EC2_SSH_KEY" > ssh_key.pem
          chmod 400 ssh_key.pem
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_HOST << EOF
            # Pull the new image
            docker pull $DOCKERHUB_USERNAME/presente-backend:production

            # Start the new container on a temporary port to test it
            docker run -d --name app_presente_backend_production_new -p 8003:8000 \
              -e POSTGRES_USER=$POSTGRES_USER \
              -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
              -e DATABASE_IP=$DATABASE_IP \
              -e SECRET_KEY=$SECRET_KEY \
              -e REDIS_HOST=$REDIS_HOST \
              -e REDIS_PORT=$REDIS_PORT \
              -e REDIS_PASSWORD=$REDIS_PASSWORD \
              -e DEBUG=$DEBUG \
              $DOCKERHUB_USERNAME/presente-backend:production

            # Wait for the container to start (account for HEALTHCHECK start-period)
            sleep 10

            # Wait and check if the new container is healthy
            echo "Waiting for the new container to become healthy..."
            for i in {1..20}
            do
              if docker inspect app_presente_backend_production_new --format='{{.State.Health.Status}}' | grep -q "healthy"; then
                echo "New container is healthy!"
                break
              fi
              if [ \$i -eq 20 ]; then
                echo "New container failed to become healthy!"
                echo "Container logs:"
                docker logs app_presente_backend_production_new
                docker stop app_presente_backend_production_new
                docker rm app_presente_backend_production_new
                exit 1
              fi
              sleep 3
            done

            # Stop and remove the old container
            docker stop app_presente_backend_production || true
            docker rm app_presente_backend_production || true

            # Rename the new container and ensure it's stopped/removed before starting the final one
            docker rename app_presente_backend_production_new app_presente_backend_production
            docker stop app_presente_backend_production || true
            docker rm app_presente_backend_production || true

            # Start the final container on the correct port
            docker run -d --name app_presente_backend_production -p 8000:8000 \
              -e POSTGRES_USER=$POSTGRES_USER \
              -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
              -e DATABASE_IP=$DATABASE_IP \
              -e SECRET_KEY=$SECRET_KEY \
              -e REDIS_HOST=$REDIS_HOST \
              -e REDIS_PORT=$REDIS_PORT \
              -e REDIS_PASSWORD=$REDIS_PASSWORD \
              -e DEBUG=$DEBUG \
              $DOCKERHUB_USERNAME/presente-backend:production

            # Verify the final container is running
            docker ps
          EOF

      - name: Clean Up ZeroTier Node
        env:
          ZEROTIER_NETWORK_ID: ${{ secrets.ZEROTIER_NETWORK_ID }}
          ZEROTIER_API_TOKEN: ${{ secrets.ZEROTIER_API_TOKEN }}
        run: |
          NODE_ID=$(sudo zerotier-cli info | awk '{print $3}')
          curl -X POST "https://api.zerotier.com/api/v1/network/$ZEROTIER_NETWORK_ID/member/$NODE_ID" \
            -H "Authorization: Bearer $ZEROTIER_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"config": {"authorized": false}}'
          sudo zerotier-cli leave $ZEROTIER_NETWORK_ID